notextile. <div class="navigation"><a id="dummyanchor"></a>

* MacTerm Help
* "Home":../index.html

notextile. </div>

h1(pagetitle). Terminals

notextile. <div class="content">

notextile. <a id="helpwithterminalsettings"></a><!-- must use this exact tag; see ExactMatch.kv -->

h2(#select). Text and Image Selections

Highlight terminal text by dragging over it with the mouse.  Keep
 it *rectangular* by holding down the Option key.  Text selections
 can often be initiated from the keyboard by holding down the Shift
 key and pressing arrow keys.

If in-terminal images are present (such as those produced by Sixel
 data or iTerm2 custom sequences), the text highlighting acts as
 an image selector too; any portion of an image may be highlighted
 in order to refer to the entire original image.  For example, you
 can use File >> Save Selection... to create an image file after
 highlighting just part of an image that you see in the terminal.

h3(#selectdrag). Drag and Drop

The Unix pathnames of files or folders can be typed by dropping
 one or more icons (from the Finder, say) into a terminal.  Spaces
 are automatically escaped by backslashes, and each dropped item's
 pathname is followed by two spaces so that it is easy to read all
 paths and construct a command line.

Text can be copied by using the mouse to move a selection to
 another location - for instance, the Desktop (to make a text
 clipping).

Text can be imported in the same way - any text dropped into a
 terminal is effectively typed into the terminal.  MacTerm will
 handle the inserted text in exactly the same way that it handles
 a Paste command.

bq. Multi-line text may trigger an alert if you have not set the
 "Don't warn about multi-line Paste" General setting.  If the
 text is pasted normally, it will first be modified to respect
 the new-line definition of the session; then, each new line may
 be delayed if a "Line Insertion Delay" Data Flow setting has
 been set for the session.  See "the settings page":preferences.html
 for more on these settings.

h3(#selectappearance). Text Selection Settings

See "the settings page":preferences.html for some options related to
 the appearance and behavior of text selections.  For instance, you
 can choose to have them automatically copied to the clipboard.

h2(#termsearch). Terminal Search

notextile. <a id="helpsearchingfortext"></a><!-- must use this exact tag; see ExactMatch.kv -->

The Edit >> Find... command allows *dynamic* search of the entire
 contents of a terminal (main screen and scrollback).  The dialog
 has a special minimalist design so that it won't cover any search
 results.

As you type, every match for the forming pattern is immediately
 found and highlighted, in a special way that does not cancel any
 other text selection in the window.  In addition, red tick marks
 appear on the scroll bar, showing you where you can find even
 more matches in the scrollback buffer.

For performance reasons, single-character searches are not
 dynamic, although you can still close the dialog to initiate a
 one-character search.

The "A=a" checkbox, again an abbreviated interface, simply makes
 the search case-insensitive.

The history menu allows you to access any previously accepted
 queries for the current terminal window.  If you do not use the
 default button when closing a search, your query is discarded and
 any previous search's highlighting is restored.

You can draw attention to individual results in turn by using the
 Edit >> Find Next command (and via modifier key, Find Previous).

h3. Auto-Completion

You can quickly find words that match either the word nearest the
 cursor or the selected text.  Invoke Edit >> Show Completions (or
 press Option-Escape) to display a menu of matches.  The candidate
 words must appear somewhere in the terminal window or scrollback
 buffer.

When you select a match from the menu, its text is typed into the
 active terminal window.  If the text at the cursor position
 already contains some portion of the completion text however,
 MacTerm will only "type" the remaining portion for you so that
 the result is the complete word.

Note that, like any menu, the completions menu can be navigated
 using the keyboard (for example: typing letters of an item to
 select it, using arrow keys, or hitting Escape to discard the
 menu).

h2. Cursor

The cursor is a special position in the bottommost screenful of a
 terminal, representing (usually) where text will appear when you
 type.

h3(#findcursor). Finding the Cursor

Use Edit >> Find Cursor to create a homing animation that tells
 you where the terminal cursor is in the active window.  This can
 be useful at times when the cursor is hard to see amongst several
 lines of text.

h3(#cursorappearance). Cursor Settings

See "the settings page":preferences.html for some options related to the
 appearance and behavior of the cursor.  For instance, you can
 choose its shape and whether or not it is flashing on and off.

h2(#commandline). Floating Command Line

notextile. <a id="helpusingthefloatingcommandline"></a><!-- must use this exact tag; see ExactMatch.kv -->

Use Window >> Command Line to display a floating window for
 entering text locally.  Unlike typing directly into a terminal,
 nothing you type in the floating window is seen until you take
 an action to send it, such as pressing the *Return* key.

MacTerm locally recognizes certain key sequences, many of which
 give the Command Line window more shell-like behavior.  The
 following table lists those special key sequences and also
 contains reminders for other standard system sequences that
 are often useful in the Command Line:

table(deftable).
(def). |_<(key). Key or Sequence|_<(desc). Effect|
(def). |<(key). ⏎ (Return)|(desc)<. send text from command line and then send the current session's new-line sequence; in addition, the command is captured to the history list if the command was sent without using intermediate actions such as Tab|
(def). |<(key). ⌘⏎ (Return)|(desc)<. send text from command line but DO NOT send any new-line sequence|
(def). |<(key). Tab|(desc)<. send text from command line and then send a tab character (@\011@)|
(def). |<(key). ⇧-Tab|(desc)<. standard system command for changing keyboard focus in Command Line window (backwards)|
(def). |<(key). ⌫ (Delete)|(desc)<. if the Command Line field is empty, immediately send a backspace or delete character, depending on session settings (no new-line); otherwise, locally erase one character in the Command Line field|
(def). |<(key). ⎋ (Escape)|(desc)<. immediately send an escape character (no new-line); useful for controlling the editor mode in "vim"|
(def). |<(key). ⌘L|(desc)<. show the Command Line window, or switch focus to it if another window is focused|
(def). |<(key). ⌘W|(desc)<. hide the Command Line window if it has keyboard focus|
(def). |<(key). ⌘~|(desc)<. switch focus to another window, including to/from a terminal window|
(def). |<(key). ⇣ (down-arrow)|(desc)<. show list of previously-entered command lines|
(def). |<(key). @⌃D@|(desc)<. send text from command line and then send end-of-file (@\004@); for most commands, this terminates multi-line input or output; in many shells, this is interpreted as "show completions" or even "log out"|
(def). |<(key). @⌃L@|(desc)<. immediately send a control-L character (no new-line); this usually causes the terminal screen to clear; any command-line text entered so far is preserved|
(def). |<(key). others|(desc)<. standard system editing short-cuts for movement, deletion, selection, etc. are supported; any other text is entered into the field directly|

The font and colors of the command line are read from your
 Default Format settings when the window is first displayed.
 (If you change these settings later, you must restart MacTerm to
 see the new settings reflected in the Command Line.)

h2. Window Operations

MacTerm provides many sophisticated ways to manage windows.

h3(#dimensions). Screen Sizes

notextile. <a id="helpsettingthescreensize"></a><!-- must use this exact tag; see ExactMatch.kv -->

Some applications that run in terminals will either assume one of
 a few standard sizes, or have issues at certain (typically large)
 sizes; for instance, text editors may run out of memory with wide
 terminals.  While MacTerm does not restrict your window size,
 it does provide a few short-cut commands to let you immediately
 change to common sizes (80x24, 80x40, 132x24).

You may also open a dialog to choose a specific number of rows
 and columns.  Note that Edit >> Undo can be used to cancel
 dimension changes made with these commands.

If your mouse has a scroll wheel, you can hold down the Option
 key and use the wheel to increase or decrease the terminal rows
 (or terminal columns, if your wheel can be moved horizontally).
 You can also adjust terminal columns by holding down both the
 Option and Command keys when using the vertical scroll wheel.

Set the "Window Resize Effect" to "Terminal screen size" in the
 MacTerm settings window if you want ordinary window resizes to
 automatically change the screen dimensions.  Note that you can
 temporarily invert this setting (to set the font size instead)
 by holding down the Control key while you resize a window.  And
 when you use "Enter Full Screen" you can hold down the Option key
 to change the resizing behavior of full-screen terminals.

h3(#magnify). Magnification

Use View >> Make Text as Big as Possible to alter a terminal's
 text size based on the display that contains the largest part of
 its window!

If your mouse has a scroll wheel, you can hold down the Control
 key and use the wheel to increase or decrease the text size.

Set "Window Resize Effect" to "Text size" in the MacTerm settings
 window if you want ordinary window resizes to automatically
 change the font size.  Note that you can temporarily invert this
 setting (to set the terminal screen size instead) by holding
 down the Control key while you resize a window.  And when you
 use "Enter Full Screen" you can hold down the Option key to
 change the resizing behavior of full-screen terminals.

Note that Edit >> Undo can be used to cancel dimension changes
 made with the "Make Text..." commands.

h3(#hide). Hiding Windows

A window can be hidden from view while it is still open, allowing
 you to reduce clutter without disturbing active commands or
 remote connections.  Note that if you Option-click another window
 the active terminal will automatically hide before activating the
 new window.

h3(#arrange). Arranging Windows

When arranged, _all_ terminal windows return to a diagonal
 stagger pattern that matches their original opening positions.
 NOTE that this cannot be undone.

h3(#sessionwinch). Session-Induced Window Changes

MacTerm respects some of XTerm's window sequences, so a terminal
 application may also affect a window.  Typically an application
 will rename the window or minimize it into the Dock.

h2(#notifications). Event Handling

You can set up automatic responses to certain events in a session
 if it is not running in the active window.  These handlers are
 available in the Terminal menu as well as in the equivalent
 toolbar item’s menu.

Notifications sent to the system while MacTerm is in the background
 are governed by your notification settings in MacTerm as well as
 system-wide settings.  For example, you might have set it to modify
 the MacTerm Dock icon.

If the "Session Info" window is visible when a notification is
 triggered, the session icon will be modified to indicate which
 window is sending the notification.

h3. Handlers

h4. None

Turns off event handling entirely.

h4. Notify on Next Activity

If the monitored session receives new data while MacTerm is not the
 active application, a notification is sent.  This can be used, for
 example, to detect when a long-running command has returned to a
 shell prompt, if it emits no other output.

h4. Notify on Inactivity (After Delay)

If the monitored session is not currently receiving any data and
 continues to receive no data for a period of time, and MacTerm is
 not the active application, then this will be triggered.

The delay can be customized with the @data-receive-idle-seconds@
 low-level setting; see "the settings page":advprefs.html#sessions
 for details.

h4. Send Keep-Alive on Inactivity

If the monitored session is not currently receiving any data and
 continues to receive no data for a period of time, a character
 will be input to the active session in an attempt to keep it
 from automatically terminating.  (This can be useful with remote
 server connections, for example.)

The exact character that is sent is determined by the Python API.

The delay can be customized with the @data-receive-idle-seconds@
 low-level setting; see "the settings page":advprefs.html#sessions
 for details.

notextile. </div>
