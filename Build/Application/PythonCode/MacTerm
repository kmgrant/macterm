#!/usr/bin/python3
# vim: set fileencoding=UTF-8 :

"""The main entry point to MacTerm.

This file's name must match the value of CFBundleExecutableName in "Info.plist".

The loader is set up in this file, so that a 2nd script (executed at the end) is
able to import compiled code.  Note that an alternative would have been to
install the necessary frameworks in a location that the loader already searches,
such as /Library/Frameworks; but it's nice to have all the files together, and
definitely nice when users don't need an installer or administrator privileges.

"""

__author__ = "Kevin Grant <kmg@mac.com>"
__date__ = "2 September 2006"

import subprocess
import sys
import os
import os.path
from os.path import join as path_join

def warn(*args, **kwargs):
    """Shorthand for printing to sys.stderr.
    """
    print(*args, file=sys.stderr, **kwargs)

if __name__ == "__main__":
    # find the "MacOS" folder
    MACOS_DIR = os.path.dirname(os.path.normpath(sys.argv[0]))
    CONTENTS_DIR = path_join(MACOS_DIR, "..")
    BUNDLE_DIR = path_join(CONTENTS_DIR, "..")
    FRAMEWORKS_DIR = path_join(CONTENTS_DIR, "Frameworks")
    #RESOURCES_DIR = path_join(CONTENTS_DIR, "Resources")

    # the PyMacTerm.framework code is not compiled, so its version
    # will depend only on whatever the current implementation is
    PYMACTERM_PYLIB_VER = "3.9"
    PYMACTERM_DIR = path_join(FRAMEWORKS_DIR, "PyMacTerm.framework")
    PYMACTERM_VERSIONS_DIR = path_join(PYMACTERM_DIR, "Versions")
    PYMACTERM_CURRENT_DIR = path_join(PYMACTERM_VERSIONS_DIR, "Current")
    PYMACTERM_PYLIB_DIR = path_join(PYMACTERM_CURRENT_DIR,
                                    "lib", "python" + PYMACTERM_PYLIB_VER)

    # now import utility modules
    sys.path.insert(0, PYMACTERM_PYLIB_DIR)
    import pymacterm.utilities
    import pymacterm.versions
    LATEST_PREFS_VERSION = pymacterm.versions.prefs_version
    MAC_OS_NAME = pymacterm.utilities.mac_os_name()
    PY2 = pymacterm.utilities.is_py2()
    if PY2:
        print("MacTerm: Some variant of Python 2.x (or less) is running.")
    else:
        print("MacTerm: Some variant of Python 3.x (or greater) is running.")

    # Notes on the platform-dependent setup below:
    #
    # The interpreter MUST be invoked from a location physically inside the
    # bundle in order for the system to assign the correct bundle ID for such
    # things as the application menu and preferences.  A tiny executable runs
    # the Python interpreter from C++ (e.g. "MacTerm_python3.9_wrap").
    #
    # MacTermQuills.framework code is the largest piece.  It is available as a
    # Universal binary.
    #
    # Now that the project requires macOS 10.9 or later, Python 2.6 is known
    # to be available on all supported macOS versions so it is assumed by
    # default.  (If a future macOS version stops supporting Python 2.6, it
    # will once again be necessary to have separate SWIG-generated wrappers for
    # each incompatible Python version.)
    DEFAULT_QUILLS_FW_VER = "B"
    DEFAULT_QUILLS_PYLIB_VER = "3.9"
    DEFAULT_WRAPPER = "MacTerm_python%s_wrap" % DEFAULT_QUILLS_PYLIB_VER
    if MAC_OS_NAME in ("Sonoma", "Ventura", "Monterey", "Big Sur", "Catalina"):
        PY_INTERPRETER = path_join(MACOS_DIR, DEFAULT_WRAPPER)
        QUILLS_FW_VER = DEFAULT_QUILLS_FW_VER
        QUILLS_PYLIB_VER = DEFAULT_QUILLS_PYLIB_VER
    elif MAC_OS_NAME in ("Mojave", "Yosemite", "El CapitÃ¡n", "Sierra",
                         "High Sierra"):
        warn("This MacTerm version requires at least macOS 10.15",
             "(Catalina).  Visit 'https://www.macterm.net/' to download",
             "version 4.1.0 for use on older systems.")
        sys.exit(1)
    elif MAC_OS_NAME in ("Mavericks", "Mountain Lion", "Lion", "Snow Leopard",
                         "Leopard", "Tiger", "Panther"):
        warn("This MacTerm version requires at least macOS 10.10",
             "(Yosemite).  Visit 'https://www.macterm.net/' to download",
             "version 4.0.0 for use on older systems.")
        sys.exit(1)
    else:
        # must be new OS version (very old versions are rejected by the
        # minimum-version setting in the bundle's Info.plist)
        warn("WARNING: Your OS version hasn't been tested with this",
             "MacTerm version.  Visit 'https://www.macterm.net/' to check",
             "for updates or report bugs.")
        PY_INTERPRETER = path_join(MACOS_DIR, DEFAULT_WRAPPER)
        QUILLS_FW_VER = DEFAULT_QUILLS_FW_VER
        QUILLS_PYLIB_VER = DEFAULT_QUILLS_PYLIB_VER
    os.environ["PYTHONEXECUTABLE"] = PY_INTERPRETER
    QUILLS_DIR = path_join(FRAMEWORKS_DIR, "MacTermQuills.framework")
    QUILLS_VERSIONS_DIR = path_join(QUILLS_DIR, "Versions")
    QUILLS_PROPER_VERSION_DIR = path_join(QUILLS_VERSIONS_DIR, QUILLS_FW_VER)
    QUILLS_PYLIB_DIR = path_join(QUILLS_PROPER_VERSION_DIR,
                                 "lib", "python" + QUILLS_PYLIB_VER)

    # if the user's preferences are out of date, convert as needed
    CONVERT_PREFERENCES = True
    if CONVERT_PREFERENCES:
        # check the current bundle's preferences, and look for the version;
        # if it is out of date (with respect to the current version) then
        # automatically invoke the Preferences Converter before going any
        # further; this must be done before initialization so that the
        # updated preferences are read and not the out-of-date settings
        DEF_CMDS = (('/usr/bin/defaults', 'read',
                     'net.macterm.MacTerm', 'prefs-version'),
                    ('/usr/bin/defaults', 'read',
                     'com.mactelnet.MacTelnet', 'prefs-version'))
        ALL_OUTPUT = None
        for def_cmd in DEF_CMDS:
            ALL_OUTPUT = pymacterm.utilities.command_data(def_cmd)
            if ALL_OUTPUT is not None:
                break
        USER_PREFS_VERSION = 0
        if ALL_OUTPUT is not None:
            try:
                LINES = ALL_OUTPUT.split(bytearray('\n', encoding='UTF-8'))
                USER_PREFS_VERSION = int(LINES[0])
            except ValueError as _:
                warn("Exception when trying to find integer",
                     "from prefs-version", _)
        print("MacTerm: Latest preferences are version %d "
              "and user preferences are version %d." %
              (LATEST_PREFS_VERSION, USER_PREFS_VERSION))
        if (LATEST_PREFS_VERSION > USER_PREFS_VERSION) and \
           (USER_PREFS_VERSION > 0):
            CONV_PATH = path_join(BUNDLE_DIR, 'Contents', 'Resources',
                                  'PrefsConverter.app', 'Contents',
                                  'MacOS', 'PrefsConverter')
            print("MacTerm: Launching Preferences Converter application",
                  "(%s)..." % CONV_PATH)
            EXIT_STATUS = subprocess.call(CONV_PATH, shell=False)
            if EXIT_STATUS != 0:
                warn("MacTerm: Preferences converter exited with",
                     "nonzero status: %d" % EXIT_STATUS)

    # put the initial bundle location in the environment, for convenience
    # when initializing other components
    os.environ["INITIAL_APP_BUNDLE_DIR"] = BUNDLE_DIR

    # specify where dependent Python and C++ libraries will reside
    PYPATH_APPEND = ""
    if "PYTHONPATH" in os.environ:
        PYPATH_APPEND = ":" + os.environ["PYTHONPATH"]
    os.environ["PYTHONPATH"] = QUILLS_PYLIB_DIR + ":" + PYMACTERM_PYLIB_DIR + \
                               PYPATH_APPEND
    os.environ["DYLD_LIBRARY_PATH"] = QUILLS_PROPER_VERSION_DIR

    # the following is NOT required for MacTerm to run, however it is
    # useful for such things as conveniently running "pydoc" on Quills;
    # attempts to load Quills will call dependent frameworks and
    # without a path these loads would fail
    os.environ["DYLD_FRAMEWORK_PATH"] = FRAMEWORKS_DIR

    # DEBUGGING ONLY: if you want to do memory debugging, you can substitute
    # the allocator library as follows (do NOT do this on a whim, guard
    # allocation makes the program MUCH, MUCH slower!)
    #os.environ["DYLD_INSERT_LIBRARIES"] = "/usr/lib/libgmalloc.dylib"

    # DEBUGGING ONLY: here is an easy way to enable the debugging versions of
    # all loaded frameworks (including system libraries), but DO NOTE this
    # is only likely to work in a boxed OS version (e.g. definitely works in
    # 10.4.0, may break in 10.4.1 as Apple does not update debug libraries)
    #os.environ["DYLD_IMAGE_SUFFIX"] = "_debug"

    # the value of sys.argv[0] is replaced before passing arguments on,
    # because it originally referred to this script
    sys.argv[0] = PY_INTERPRETER

    # locate the "real" main entry point script, the one depending on C++
    # libraries (hence the environment setup above); ensure it is passed as
    # the main argument to the interpreter
    MAIN_SCRIPT = path_join(MACOS_DIR, "RunApplication.py")
    sys.argv.insert(1, MAIN_SCRIPT)

    # if requested, run in the debugger
    RUN_IN_DEBUGGER = (("MACTERM_DEBUG" in os.environ) and
                       (os.environ["MACTERM_DEBUG"] == "1"))
    if RUN_IN_DEBUGGER:
        if "MACTERM_LLDB" in os.environ:
            DEBUGGER_PATH = os.environ["MACTERM_LLDB"]
        else:
            DEBUGGER_PATH = path_join("/", "Applications", "Xcode.app",
                                      "Contents", "Developer",
                                      "usr", "bin", "lldb")
        print("MacTerm: Debugging with lldb has been enabled.")
        sys.argv.insert(0, '--')
        sys.argv.insert(0, DEBUGGER_PATH)

    # WARNING: the Finder will include arguments (e.g. -psn_0_10223617) that
    # will not be present in a normal shell run; ensure these arguments are
    # preserved so that runs from the Finder are successful

    # if it is ever necessary to pass arguments to the 2nd Python script,
    # you could do so here
    #sys.argv.append('--whatever-option')

    # Since the main loop loads compiled Python modules, the environment of
    # the interpreter itself must know where those C++ libraries are.  It is
    # therefore necessary to re-exec an interpreter (with the environment
    # defined above) as opposed to simply running the 2nd Python file with
    # execfile(), say.
    try:
        os.execve(sys.argv[0], sys.argv, os.environ)
    except OSError as _:
        warn("Exception raised while attempting to run",
             sys.argv[0], sys.argv, ":", _)
    sys.exit(1)
